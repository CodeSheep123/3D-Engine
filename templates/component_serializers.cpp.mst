#include <saturn/serialization/component_serializers.hpp>
#include <saturn/serialization/default_serializers.hpp>

#include <phobos/renderer/material.hpp>
#include <phobos/renderer/mesh.hpp>
#include <phobos/renderer/texture.hpp>

namespace saturn::components {

{{#serializer_impl}}
void from_json(nlohmann::json const& j, {{component_name}}& component) {
    {{#deserialize_field}}
    component.{{field_name}} = j["{{field_name}}"];
    {{/deserialize_field}}
}

void to_json(nlohmann::json& j, {{component_name}} const& component) {
    {{#serialize_field}}
    j["{{field_name}}"] = component.{{field_name}};
    {{/serialize_field}}
}


{{/serializer_impl}}

}

namespace saturn::ecs {

static void do_deserialize(registry& ecs, nlohmann::json const& j, entity_t entity) {
    using namespace components;
    {{#entity_serialize}}
    if (auto json_it = j.find("{{component_name}}"); json_it != j.end()) {
        ecs.add_component<{{component_name}}>(entity);
        ecs.get_component<{{component_name}}>(entity) = *json_it;
    }
    {{/entity_serialize}}
}

void deserialize_into_entity(nlohmann::json const& j, registry& ecs, entity_t entity) {
    do_deserialize(ecs, j, entity);
    auto children = j.find("Children");
    if (children != j.end()) {
        for (auto const& child : *children) {
            entity_t child_entity = ecs.create_entity(entity);
            deserialize_into_entity(child, ecs, child_entity);
        }
    }
}

static void do_serialize(registry const& ecs, nlohmann::json& j, entity_t entity) {
    using namespace components;
    {{#entity_serialize}}
    if (ecs.has_component<{{component_name}}>(entity)) {
        j["{{component_name}}"] = ecs.get_component<{{component_name}}>(entity);
    }
    {{/entity_serialize}}
}

void serialize_from_entity(nlohmann::json& j, registry const& ecs, entity_t entity) {
    auto entity_it = ecs.get_entities().find(entity);

    auto serialize_fun = [&ecs](entity_t entity, stl::tree<entity_t>::const_traverse_info const& info, nlohmann::json& j)
        -> std::tuple<nlohmann::json&> {
        // Root entity
        
        if (info.level == 0) {
            do_serialize(ecs, j, entity);
            j["Children"] = nlohmann::json::array();
            return std::tie(j["Children"]);
        } else { // Child entity
            nlohmann::json child_json;
            do_serialize(ecs, child_json, entity);
            j.push_back(stl::move(child_json));
            return std::tie(j);
        }
    };
    
   ecs.get_entities().traverse_from(entity_it, serialize_fun, j);
}

void from_json(nlohmann::json const& j, registry& ecs) {
    for (auto const& json_entity : j) {
        auto ent = ecs.create_entity();
        deserialize_into_entity(json_entity, ecs, ent);
    }
}

void to_json(nlohmann::json& j, registry const& ecs) {
    j = nlohmann::json::array();
    // TODO: Serialize parent somehow
    auto serialize_fn = [&j, &ecs](entity_t entity, stl::tree<entity_t>::const_traverse_info const& info) {
        nlohmann::json& ent_json = j.emplace_back(nlohmann::json::object());
        serialize_from_entity(ent_json, ecs, entity);
    };

    ecs.get_entities().traverse(serialize_fn);
}

}